
* Speech recognition grammars
Why do we need grammars?

** XML
https://en.wikipedia.org/wiki/XML

Subsets:
- SSML
- SRGS

Small XML lexicon:
- tag: ~<emphasis> Hey! </emphasis>~
- empty-element tag: ~<ruleref/>~
- element: ~<item><i>medium</i><tag/></item>~
- attributes: ~<ruleref uri="#pizza"/>~
- comments: ~<!-- Two properties (drinksize, type) on left hand side Rule Variable -->~

** SRGS: Speech Recognition Grammar Specification
https://www.w3.org/TR/speech-grammar/

*** playground:
- Download SRGS parser developed by Peter Torbjörn Lager and Peter
  Ljunglöf: [[srgslab.zip]]
- unzip and open ~index.html~ 
*** grammar rules
- the grammar consists of rules
- ~root~ parameter refers to the top rule ~id~
- ~<ruleref>~ defines the reference from one rule to another by id (note
  the ~#~ symbol)
- ~<tag>~ contains semantic representation string
#+begin_src xml
<grammar root="order">
   <rule id="order">
      <ruleref uri="#pizza"/>
   </rule>
   <rule id="pizza">
      <one-of>
         <item>medium</item>
         <item>small</item>
      </one-of>
   </rule>
</grammar>
#+end_src
*** items, repeat and one-of
#+begin_src xml
   <rule id="pizza">
      I <item repeat="0-">really</item>
      want a
      <one-of>
         <item>medium</item>
         <item>small</item>
      </one-of>
   </rule>
#+end_src
*** tags and semantic interpretation
- https://www.w3.org/TR/semantic-interpretation/
**** rule variables (identified by ~out~)
  - ~out~              (identifies the Rule Variable)
  - ~out.pizza~        (identifies the pizza property of the Rule Variable)
  #+begin_src xml
  <grammar root="order">
    <rule id="order">
       <ruleref uri="#pizza"/>
       <tag>out.pizza=rules.pizza;</tag>
    </rule>
    <rule id="pizza">
       <one-of>
          <item>medium<tag>out.pizzasize='M'</tag></item>
          <item>small<tag>out.pizzasize='S'</tag></item>
       </one-of>
    </rule>
  </grammar>  
  #+end_src
**** more complex objects
#+begin_src js
out.order=Object(); out.order.pizza=rules.pizza;
#+end_src
**** default assignment
#+begin_src xml
<rule id="pizza">
  <tag>out.pizzasize='M'</tag>
  ...
</rule>
#+end_src
**** final version of the example
#+begin_src xml
<grammar root="order">
   <rule id="order">
      <ruleref uri="#pizza"/>
      <tag>out.order=Object(); out.order.pizza=rules.pizza;</tag>
   </rule>
   <rule id="pizza">
      <tag>out.pizzasize='M'</tag>
      <item repeat="0-">I really want a</item>
      <item repeat="0-">
        <one-of>
         <item>medium<tag>out.pizzasize='M';</tag></item>
         <item>small<tag>out.pizzasize='S';</tag></item>
        </one-of>
      </item>
      pizza
      <item repeat="0-"><ruleref uri="#topping"/></item>
      <tag>out.topping=rules.topping;</tag>
   </rule>
   <rule id="topping">
      with
     <one-of>
         <item>pepperoni<tag>out='pepperoni';</tag></item>
         <item>anchovi<tag>out='anchovi';</tag></item>
      </one-of>
   </rule>
</grammar>
#+end_src
*** SRGS in XState

* Advanced dialogue management
** "towards" VoiceXML
https://www.w3.org/TR/voicexml20/

** ’links’ and their scope
** timeout and maxspeech
- on timeout: stop recognising and throw event
- additional event "catcher" in ASR
- limitation: technically it is not a silence, but we also don’t allow
  user to speak longer than the timeout
  - how can this be fixed?

** re-prompt and non-local noinput handling
- history state, shallow and deep
  
** tapered prompts
- same-level transition
- counter and guards
  
** form-filling (or frame-based DM)
Helps to support initiative from the user (mixed initiative).

Frame structure:
| Field  | Value  |
|--------+--------|
| ORIGIN | Paris  |
| DEST   | London |
| DATE   | Jan 13 |
| TIME   | 3      |

#+BEGIN_EXAMPLE
S: Welcome to the travel booking system.
   You can now make your reservation
U: I want to go to London
S: From where do you want to go?
U: From Paris
S: Which date do you want to go?
U: On the 13th of January
S: At what time do you want to go?
U: Three o’clock
S: Thanks for your reservation ...
#+END_EXAMPLE

*** or shorter dialogue:
#+BEGIN_EXAMPLE
U: I want to go from Paris to London
S: Which date do you want to go?
U: Three o’clock on the 13th of January
S: Thanks for your reservation ...
#+END_EXAMPLE


** no coverage:
- audio playback
- audio recording 

* COMMENT To be continued: Dialogue Systems 2
*** Dialogue Systems 2 course
- Elective course, 3rd semester
- Focus on:
  - Information State Update approach to DM
  - Implementing general dialogue strategies that work across domains
  - Evaluating dialogue systems with respect to dialogue strategies that they can handle
  - Lab and project based

* Live coding:
#+begin_src js
export const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({
    initial: 'init',
    states: {
        init: {
            on: {
                CLICK: 'askColourAndShape'
            }
        },
        askColourAndShape: {
            initial: 'colour',
            on: {
                RECOGNISED:
                {
                    target: 'stop',
                    actions: cancel('maxsp'),
                    cond: (context) => context.recResult === 'stop'
                },
                MAXSPEECH: 'maxspeech'
            },
            states: {
                hist: { type: 'history', history: 'deep' },
                colour: {
                    on: {
                        RECOGNISED: [
                            {
                                target: 'shape',
                                actions: cancel('maxsp'),
                                cond: (context) => !(context.recResult in commands)
                            }],
                    },
                    ...promptAndAsk("Tell me the colour"),
                },
                shape: {
                    on: {
                        RECOGNISED: [
                            {
                                target: '#root.dm.repaint',
                                actions: cancel('maxsp'),
                                cond: (context) => !(context.recResult in commands)
                            }],
                    },
                    ...promptAndAsk("Tell me the shape")
                },
            }
        },
        maxspeech: {
            entry: say("Sorry"),
            on: { 'ENDSPEECH': 'askColourAndShape.hist' }
        },
        stop: {
            entry: say("Ok"),
            always: 'init'
        },
        repaint: {
            initial: 'prompt',
            states: {
                prompt: {
                    entry: sayColour,
                    on: { ENDSPEECH: 'repaint' }
                },
                repaint: {
                    entry: 'changeColour',
                    always: '#root.dm.askColourAndShape'
                }
            }
        }
    }
})
#+end_src

